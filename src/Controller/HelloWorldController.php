<?php
// src/Controller/HelloWorldController.php
// src/Controller/HelloWorldController.php

namespace App\Controller;
use App\Entity\Book;
use App\Entity\Feedback;
use App\Entity\Reservation;
use App\Entity\Student;
use App\Repository\CourseRepository;
use App\Repository\FeedbackRepository;
use App\Repository\ReservationRepository;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\EntityManagerInterface;
use JetBrains\PhpStorm\NoReturn;
use Symfony\Bridge\Doctrine\Form\Type\EntityType;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Form;
use Symfony\Component\Form\FormBuilder;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Attribute\Route;

class HelloWorldController extends AbstractController
{



    /*
        public function show(UserRepository $userRepository, $id)
        {
            $user = $userRepository->find($id);

            if (!$user) {
                throw $this->createNotFoundException('No user found for id '.$id);
            }

            return $this->render('Pages/index.html.twig', array(
                "user" => $user,
            ));
        }

    */

    /*
    #[Route('/user/{id}',name:'logIn')]
    public function homePage(UserRepository $userRepository, $id): Response
    {
        $user = $userRepository->find($id);

        if (!$user) {
            throw $this->createNotFoundException('No user found for id '.$id);
        }

        $tracks=[['name'=>'ramazan','surname'=>'yetismis'],
            ['name'=>'ramo','surname'=>'yetismis'],
            ['name'=>'ramazan','surname'=>'yetismis']

        ];
        return $this->render('Pages/index.html.twig',[
            "user" => $user,
            'title'=> 'Ramazan and Ramo',
            'tracks'=>$tracks,
        ]);
    }
    /*
        #[Route(User::class)]
        public function getUser(): ?UserInterface
        {
            return parent::getUser(); // TODO: Change the autogenerated stub
        }
    */

    /*

    #[Route('/register',name:'SignIn')]
    public function register(Request $request, EntityManagerInterface $em): Response
    {
        $person=new User();


        $form = $this->createFormBuilder($person)
            ->add('email', EmailType::class)
            ->add('password', PasswordType::class)
            ->add('username', TextType::class)
            ->add('name', TextType::class)
            ->add('surname', TextType::class)
            ->add('save', SubmitType::class, ['label' => 'Register'])
            ->getForm();
        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {

            // Persist the user to the database
            $em->persist($person);
            $em->flush();

            // Redirect to a thank you page or login page
            return $this->redirectToRoute('thank_you');
        }

        return $this->render('Pages/register.html.twig',[
            'form' => $form->createView()
        ]);
    }
    */

}